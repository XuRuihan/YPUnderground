【重要更新】
1. 新增check-time方法
2. get-appoint的GET方法和get-room的POST方法不再返回【canceled】和【过期】的预约



********************************************************************************************************************************
********************************************************************************************************************************
更新过后的接口规范如下：
********************************************************************************************************************************
********************************************************************************************************************************


【地下室预约系统接口】

【返回值接口规范】
返回值为一个json对象，
cookies，errMsg，header都是后端框架的默认信息，没啥用
data为业务数据，必须是任意 JSON 数据	类型(number/string/boolean/object/array)
statusCode为响应状态，必须为非负整数，0表示响应成功，大于0表示响应失败（具体值表示的含义可以再定，比如1表示未授权时调用需要授权的接口，等等）
statusInfo只有在响应失败时才有，必须为 JSON 数据类型其中：
message为用户提示信息，
detail用来防止错误的详细信息，例如异常Exception

ret = {
    cookies: [],			# 设置cookies，由于小程序不支持cookies，暂时用不上
    data: {
        data:{},			# 如果成功返回，显示数据。显示数据的格式和之前会有细微差别，下面我会一一说明。建议使用【res.data.data】查看数据
        message: "",			# 成功则没有这一项，失败返回错误信息
    },
    errMsg: "request:ok"		# 永远应该为request:ok
    header: {}			# 请求头，包含时间、服务器、格式等信息。一般用不到
    statusCode: 200,			# 200表示成功。建议使用【if statusCode==200】的方式判断请求是否成功返回
}

statusCode 状态响应码规范：
200：【成功】
4XX：【客户端错误】使用了不合法的请求方式（GET、POST），缺少参数或参数不符合规范（条目不存在、插入重复、开始时间晚于结束时间等）
5XX：【服务器崩溃】看到5开头的错误就来找我……一定是我的锅（4开头的也可能是我的锅）


假设前端使用的返回值是
      success: function(res) {
        console.log(res)
      }
那么console中的结果应该为：

{
    cookies: [],			# 设置cookies，由于小程序不支持cookies，暂时用不上
    data: {
        data:{},			# 如果成功返回，显示数据。显示数据的格式和之前会有细微差别，下面我会一一说明。建议使用【res.data.data】查看数据
        statusInfo: {			# 成功则没有这一项，失败返回。也就是说，【data】和【statusInfo】只会有一个
            message: "",			# 成功则没有这一项，失败返回[错误提示]信息（开发者提示）。
            detail: "",			# 成功则没有这一项，失败返回[异常]信息（服务器默认返回）。
        }
    },
    errMsg: "request:ok"		# 永远应该为request:ok
    header: {}			# 请求头，包含时间、服务器、格式等信息。一般用不到
    statusCode: 200,			# 200表示成功。建议使用【if statusCode==200】的方式判断请求是否成功返回
}


【预约状态Astatus的可选值】

        Canceled	# 已取消
        Appoint	# 预约中
        Processing	# 进行中
        Waiting	# 等待确认
        Confirmed	# 已确认
        Violated	# 违约
        Judged	# 违约申诉成功

[学生]和[房间]信息请在管理平台上操作，[预约]信息尽量不要在平台上操作


【百度自习室摄像头接口】待联络

【地下室预约房间接口】


1. 获取所有预约信息（想想这个好像没什么用？）

url 地址：http://39.107.70.176:9000/appointment/get-appoint
方法：GET
参数：无

返回值：
'data': [
    {
        'Aid': '',  # 预约编号
        'Atime': '',  # 申请提交时间
        'Astart': '',  # 开始使用时间
        'Afinish': '',  # 结束使用时间
        'Ausage': '',  # 房间用途
        'Astatus': '',  # 预约状态
        'Rid': '',  # 房间编号
        'Rtitle': '',  # 房间名称
        'students': [  # 预约人
            {
                'Sname': '',  # 预约人姓名
            },
            ...
        ]
    },
    ...
]


2. 获取所有房间

url 地址：http://39.107.70.176:9000/appointment/get-room
方法：GET
参数：无

返回值：
'data': [
    {
        'Rid': '',  # 房间编号
        'Rtitle': '',  # 房间名称
        'Rmin': '',  # 房间最少预约人数
        'Rmax': '',  # 房间最多使用人数（建议）
        'Rstart': '',  # 房间最早预约时间
        'Rfinish': '',  # 房间最晚预约时间
        'Rstatus': '',  # 当前房间状态，0表示可预约'Permitted'，1表示当前不可预约'Forbidden'
    },
    ...
]


3. 获取某个房间的预约信息

url 地址：http://39.107.70.176:9000/appointment/get-room
方法：POST
参数：Rid

返回值：
'data': [
    {
        'Aid': '',  # 预约编号
        'Atime': '',  # 申请提交时间
        'Astart': '',  # 开始使用时间
        'Afinish': '',  # 结束使用时间
        'Ausage': '',  # 房间用途
        'students': [  # 预约人
            {
                'Sname': '',  # 预约人姓名
            },
            ...
        ]
    },
    ...
]


4. 申请预约

url 地址：http://39.107.70.176:9000/appointment/add-appoint
方法：POST
参数：Json对象，内容如下：{
    'Astart': '',  # 开始使用时间
    'Afinish': '',  # 结束使用时间
    'Ausage': '',  # 房间用途
    'Rid': '',  # 房间编号
    'Rtitle': '',  # 房间名称
    'students': [  # 预约人
        {
            'Sid': '',  # 预约人学号
            'Sname': '',  # 预约人姓名
        },
        ...
    ]
}

返回值：
'data': {
    'Aid': '',  # 预约编号
    'Atime': '',  # 申请提交时间
    'Astart': '',  # 开始使用时间
    'Afinish': '',  # 结束使用时间
    'Ausage': '',  # 房间用途
    'Astatus': '',  # 房间状态，必须为Appointed预约中
    'students': [  # 预约人
        {
            'Sname': '',  # 预约人姓名
        },
        ...
    ]
}


5. 查询个人所有预约信息

url 地址：http://39.107.70.176:9000/appointment/get-student
方法：POST
参数：Sid

返回值：
'data': [
    {
        'Aid': '',  # 预约编号
        'Atime': '',  # 申请提交时间
        'Astart': '',  # 开始使用时间
        'Afinish': '',  # 结束使用时间
        'Ausage': '',  # 房间用途
        'Astatus': '',  # 房间状态，Appointed预约中，Processing进行中，Waiting等待确认，Confirmed通过，Violated违约，Judged申诉成功，Cancelled已取消
        'students': [  # 预约人
            {
                'Sname': '',  # 预约人姓名
            },
            ...
        ]
    },
    ...
]


6. 取消预约

url 地址：http://39.107.70.176:9000/appointment/cancel-appoint
方法：POST
参数：Aid

返回值：
'data': {
    'Aid': '',  # 预约编号
    'Atime': '',  # 申请提交时间
    'Astart': '',  # 开始使用时间
    'Afinish': '',  # 结束使用时间
    'Ausage': '',  # 房间用途
    'Astatus': '',  # 房间状态，必须为Cancelled已取消
    'students': [  # 预约人
        {
            'Sname': '',  # 预约人姓名
        },
        ...
    ]
}


7. 检查某房间在某时间段是否可以预约

url 地址：http://39.107.70.176:9000/appointment/check-time
方法：POST
参数：Json对象，内容如下：{
    'Astart': '',  # 开始使用时间
    'Afinish': '',  # 结束使用时间
    'Rid': '',  # 房间编号
}

返回值：
'data': 'ok'


【元培地下室 - 管理平台】
url 地址：http://39.107.70.176:9000/admin/
方法：直接在浏览器中访问

用户名：admin
密码：YPadmin

【注意！！！】
1. APscheduler中加入了定时操作，在调用添加预约接口的时候会自动加入Aid_start, Aid_finish, Aid_confirm三个任务，调用取消预约接口的时候会自动删除。
但是在管理平台中直接添加预约、删除预约不会产生或删除这三个任务。所以不建议在平台上操作。这不是bug！
2. 【管理平台不要插入相同的[学生]和[房间]】这一定会产生bug！不允许出现两个相同的主键！